# User
type UserBag {
    users: [User!]
}

type User {
    id: ID!
    mail: String!
    ownedCollections: [Collection!]!
    sharedCollections: [Collection!]!
    defaultCollection: Collection!
    ownedImages: [Image!]
}

# Collection
type CollectionBag {
    collections: [Collection!]
}

type Collection {
    id: ID!
    defaultCollection: Boolean!
    images: [Image]!
    sharedWith: [User!]!
    owner: User!
    displayName: String!
    pin: Int!
    nonOwnersCanShare: Boolean!
    nonOwnersCanWrite: Boolean!
    creationTimestamp: String!
}

# Image
type ImageBag {
    images: [Image!]
}

type Image {
    id: ID!
    payload: String!
    extractedText: String
    scoredLabels: [ScoredLabel]!
    containedInCollections: [Collection!]!
    owner: User!
    creationTimestamp: String!
}

type ScoredLabel {
    label: String!
    score: Float!
}

# Root Query
type Query {
    getUsers: UserBag!
    getUserByMail(mail: String!): UserBag!,
    getCollections: CollectionBag!
    getCollectionByID(id: ID!): CollectionBag!
    getImages: ImageBag!
    getImagesForUserInCollection(userID: ID!, collectionID: ID!): ImageBag!
    searchImagesInCollections(userID: ID!, collectionIDs: [ID!]!, labels: [String!], text: String, searchMode:
    String!): ImageBag!
}

# Root Mutation
type Mutation {
    createUserWithDefaultCollection(mail: String!, password: String!): UserBag!
    createCollection(ownerID: ID!, displayName: String!, pin: Int!, nonOwnersCanShare: Boolean!, nonOwnersCanWrite:
    Boolean!): CollectionBag!
    shareCollection(collectionID: ID!, ownerID: ID!, userIDs: [ID!]!): CollectionBag!
    uploadImages(ownerID: ID!, collectionID: ID!, base64Payloads: [String!]!): ImageBag!
}
